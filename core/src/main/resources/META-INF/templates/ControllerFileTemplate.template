*{prefix}*
package *{tableInfo.savePath}*.controller;

import com.alibaba.fastjson.JSONObject;
import *{tableInfo.savePath}*.domain.*{tableInfo.domainName}*;
import com.zzd.common.core.exception.exceptioncode.CommonExCodeEnum;
import com.zzd.common.core.response.Response;
import com.zzd.common.core.response.ResponseFactory;
import *{tableInfo.savePath}*.service.*{tableInfo.domainName}*Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * *{tableInfo.tableComment}*类
 * @since  *{tool.currentDateTime()}*
 * @version 1.0.0
 * @author *{tool.author()}*
 */
@RestController
@RequestMapping("/*{tool.firstLower(*{tableInfo.domainName}*)}*")
@Api(value = "*{tableInfo.domainName}*Controller|*{tableInfo.tableComment}*控制器")
public class *{tableInfo.domainName}*Controller {

    /**
     * 业务处理类注入
     */
    @Autowired
    private *{tableInfo.domainName}*Service *{tool.firstLower(*{tableInfo.domainName}*)}*Service;
*{/prefix}*
    *{function}*
    /**
     * 添加*{tableInfo.tableComment}*
     *
     * @param *{tool.firstLower(*{tableInfo.domainName}*)}*       *{tableInfo.tableComment}*信息
     * @return 数据处理结果
     */
    @PostMapping("/add*{tableInfo.domainName}*")
    @ApiOperation(value = "添加*{tableInfo.tableComment}*", notes = "")
    public Response $add*{tableInfo.domainName}*$(@Validated @RequestBody *{tableInfo.domainName}* *{tool.firstLower(*{tableInfo.domainName}*)}*) {
        List<ObjectError> errorList = errorResult.getAllErrors();
        if (!errorList.isEmpty()) {
            String message = errorList.stream().findFirst().get().getDefaultMessage();
            return ResponseFactory.build(CommonExCodeEnum.FORM_DATA_ERROR, message);
        }
        return ResponseFactory.build(*{tool.firstLower(*{tableInfo.domainName}*)}*Service.add*{tableInfo.domainName}*(*{tool.firstLower(*{tableInfo.domainName}*)}*));
    }
    *{/function}*

   *{function}*
    /**
     * 删除*{tableInfo.tableComment}*根据id数组
     *
     * @param idS *{tableInfo.tableComment}*id数组
     * @return 数据处理结果
     */
    @DeleteMapping("/delete*{tableInfo.domainName}*")
    @ApiOperation(value = "删除*{tableInfo.tableComment}*", notes = "")
    @ApiImplicitParam(paramType = "query", name = "idS", value = "*{tableInfo.tableComment}*id数组", required = true, dataType = "String")
    public Response $delete*{tableInfo.domainName}*$(@RequestParam String idS) {
        return ResponseFactory.build(*{tool.firstLower(*{tableInfo.domainName}*)}*Service.delete*{tableInfo.domainName}*(idS));
    }
    *{/function}*

   *{function}*
    /**
     * 修改*{tableInfo.tableComment}*
     *
     * @param *{tool.firstLower(*{tableInfo.domainName}*)}*       *{tableInfo.tableComment}*信息
     * @return 数据处理结果
     */
    @PutMapping("/edit*{tableInfo.domainName}*")
    @ApiOperation(value = "修改*{tableInfo.tableComment}*", notes = "")
    public Response $edit*{tableInfo.domainName}*$(@Validated @RequestBody *{tableInfo.domainName}* *{tool.firstLower(*{tableInfo.domainName}*)}*) {
        List<ObjectError> errorList = errorResult.getAllErrors();
        if (!errorList.isEmpty()) {
            String message = errorList.stream().findFirst().get().getDefaultMessage();
            return ResponseFactory.build(CommonExCodeEnum.FORM_DATA_ERROR, message);
        }
        return ResponseFactory.build(*{tool.firstLower(*{tableInfo.domainName}*)}*Service.edit*{tableInfo.domainName}*(*{tool.firstLower(*{tableInfo.domainName}*)}*));
    }
    *{/function}*

    *{function}*
    /**
     * 根据id 获取*{tableInfo.tableComment}*
     *
     * @param id *{tableInfo.tableComment}*的id
     * @return 数据处理结果
     */
    @GetMapping("/get*{tableInfo.domainName}*ById")
    @ApiOperation(value = "根据id获取*{tableInfo.tableComment}*", notes = "返回*{tableInfo.tableComment}*详细信息")
    @ApiImplicitParam(paramType = "query", name = "id", value = "*{tableInfo.tableComment}*id", required = true, dataType = "Integer")
    public Response $get*{tableInfo.domainName}*ById$(@RequestParam Integer id) {
        return ResponseFactory.buildSuccess(*{tool.firstLower(*{tableInfo.domainName}*)}*Service.get*{tableInfo.domainName}*ById(id));
    }
    *{/function}*

    *{function}*
    /**
     * 分页方法
     * 获取*{tableInfo.tableComment}*列表信息
     *
     * @param findKey     *{tableInfo.tableComment}* 信息关键字
     * @param indexOfPage 当前页数
     * @param pageCount   当前页总数
     * @return 数据处理结果
     */
    @GetMapping("/getAll*{tableInfo.domainName}*List")
    @ApiOperation(value = "获取*{tableInfo.tableComment}*列表", notes = "返回*{tableInfo.tableComment}*列表信息")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "findKey", value = "*{tableInfo.tableComment}*信息关键字", required = true, dataType = "String"),
            @ApiImplicitParam(paramType = "query", name = "indexOfPage", value = "当前页数,如果不传默认为1", required = false, dataType = "Integer"),
            @ApiImplicitParam(paramType = "query", name = "pageCount", value = "每页记录数，如果不传默认为20", required = false, dataType = "Integer"),
    })
    public Response $getAll*{tableInfo.domainName}*List$(@RequestParam(required = false, defaultValue = "") String findKey, @RequestParam(required = false) Integer indexOfPage, @RequestParam(required = false) Integer pageCount) throws NoTokenException {

        //获取当前记录的总数
        indexOfPage = null == indexOfPage ? 1 : indexOfPage;
        pageCount = null == pageCount ? 20 : pageCount;

        //根据页码得到当前需要显示的记录数
        int offset = (indexOfPage - 1) * pageCount;
        int *{tool.firstLower(*{tableInfo.domainName}*)}*Count = *{tool.firstLower(*{tableInfo.domainName}*)}*Service.get*{tableInfo.domainName}*Count(findKey);
        JSONObject resultReal = new JSONObject();
        resultReal.put("total", *{tool.firstLower(*{tableInfo.domainName}*)}*Count);
        if(*{tool.firstLower(*{tableInfo.domainName}*)}*Count==0){
            resultReal.put("*{tool.firstLower(*{tableInfo.domainName}*)}*S", Collections.emptyList());
            return ResponseFactory.buildSuccess(resultReal);
        }
        List<*{tableInfo.domainName}*> result = *{tool.firstLower(*{tableInfo.domainName}*)}*Service.getAll*{tableInfo.domainName}*List(findKey, offset, pageCount);
        resultReal.put("*{tool.firstLower(*{tableInfo.domainName}*)}*S", result);
        return ResponseFactory.buildSuccess(resultReal);
    }
    *{/function}*
*{suffix}*
}
*{/suffix}*
