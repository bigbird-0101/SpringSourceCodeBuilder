*{prefix}*
package *{tableInfo.savePath}*.service.impl;

import com.zzd.common.TokenSupport;
import *{tableInfo.savePath}*.dao.*{tableInfo.domainName}*Dao;
import *{tableInfo.savePath}*.domain.*{tableInfo.domainName}*;
import com.zzd.exception.NoTokenException;
import *{tableInfo.savePath}*.service.*{tableInfo.domainName}*Service;
import org.apache.logging.log4j.util.Strings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * *{tableInfo.tableComment}*业务处理接口实现类
 * @since  *{tool.currentDateTime()}*
 * @version 1.0.0
 * @author *{tool.author()}*
 */
@Service
public class *{tableInfo.domainName}*ServiceImpl implements *{tableInfo.domainName}*Service {
    @Autowired
    private *{tableInfo.domainName}*Dao *{tool.firstLower(*{tableInfo.domainName}*)}*Dao;
*{/prefix}*
*{function}*
    /**
     * 添加*{tableInfo.tableComment}*
     *
     * @param *{tool.firstLower(*{tableInfo.domainName}*)}* *{tableInfo.tableComment}*POJO
     * @return 返回是否成功
     */
    @Override
    @Transactional(rollbackFor = Throwable.class)
    public boolean $add*{tableInfo.domainName}*$(*{tableInfo.domainName}* *{tool.firstLower(*{tableInfo.domainName}*)}*) {
        Objects.requireNonNull(*{tool.firstLower(*{tableInfo.domainName}*)}*);
        *{tool.firstLower(*{tableInfo.domainName}*)}*.setGmtCreate(new Date());
        *{tool.firstLower(*{tableInfo.domainName}*)}*.setGmtModified(new Date());
        return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.add*{tableInfo.domainName}*(*{tool.firstLower(*{tableInfo.domainName}*)}*) == 1;
    }
*{/function}*
*{function}*
    /**
     * 删除*{tableInfo.tableComment}* 根据其id数组
     *
     * @param idS *{tableInfo.tableComment}*id数组
     * @return 返回是否成功
     */
    @Override
    @Transactional(rollbackFor = Throwable.class)
    public boolean $delete*{tableInfo.domainName}*$(String idS) {
        if (Strings.isNotBlank(idS)) {
            List<String> idArray = Arrays.stream(idS.split(",")).filter(Strings::isNotBlank).distinct().collect(Collectors.toList());
            return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.delete*{tableInfo.domainName}*(idArray) == idArray.size();
        }
        return false;
    }
*{/function}*
*{function}*
    /**
     * 编辑*{tableInfo.tableComment}*
     *
     * @param *{tool.firstLower(*{tableInfo.domainName}*)}* *{tableInfo.tableComment}*POJO
     * @return 返回是否成功
     */
    @Override
    @Transactional(rollbackFor = Throwable.class)
    public boolean $edit*{tableInfo.domainName}*$(*{tableInfo.domainName}* *{tool.firstLower(*{tableInfo.domainName}*)}*) {
        Objects.requireNonNull(*{tool.firstLower(*{tableInfo.domainName}*)}*);
        *{tool.firstLower(*{tableInfo.domainName}*)}*.setGmtModified(new Date());
        return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.edit*{tableInfo.domainName}*(*{tool.firstLower(*{tableInfo.domainName}*)}*) == 1;
    }
*{/function}*
*{function}*
    /**
     * 根据id获取*{tableInfo.tableComment}*信息
     *
     * @param id *{tableInfo.tableComment}*id
     * @return *{tableInfo.tableComment}*POJO
     */
    @Override
    public *{tableInfo.domainName}* $get*{tableInfo.domainName}*ById$(int id) {
        return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.get*{tableInfo.domainName}*ById(id);
    }
*{/function}*
*{function}*
    /**
     * 根据所属者id和关键字获取*{tableInfo.tableComment}*信息个数
     *
     * @param findKey 查找关键字
     * @return 查找到的记录总数
     */
    @Override
    public int $get*{tableInfo.domainName}*Count$(String findKey) throws NoTokenException {
        int belongToId = TokenSupport.currentId();
        return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.get*{tableInfo.domainName}*Count(belongToId, findKey);
    }
*{/function}*
*{function}*
    /**
     * 分页方法获取*{tableInfo.tableComment}*信息列表
     *
     * @param findKey   *{tableInfo.tableComment}* 信息关键字
     * @param offset    当前页数
     * @param pageCount 当前页总数
     * @return *{tableInfo.tableComment}*数据列表
     */
    @Override
    public List<*{tableInfo.domainName}*> $getAll*{tableInfo.domainName}*List$(String findKey, int offset, int pageCount) throws NoTokenException {
        int belongToId = TokenSupport.currentId();
        return *{tool.firstLower(*{tableInfo.domainName}*)}*Dao.getAll*{tableInfo.domainName}*List(belongToId, findKey, offset, pageCount);
    }
*{/function}*
*{suffix}*
}
*{/suffix}*